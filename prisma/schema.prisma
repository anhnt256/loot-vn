generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Rank {
  id           Int      @id @default(autoincrement())
  name         String
  fromValue    Float
  toValue      Float
  discount     Float?
  foodVoucher  Int?
  drinkVoucher Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Game {
  id            Int      @id @default(autoincrement())
  name          String
  startDate     DateTime
  endDate       DateTime
  starsPerRound Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  balance_rate  Float?   @db.Float
  play_rate     Float?   @db.Float
  jackpot       Float?   @db.Float
}

model CheckInResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  branch    String?  @default("GO_VAP")
}

model CheckInItem {
  id        Int      @id @default(autoincrement())
  dayName   String
  stars     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CheckInPromotion {
  id            Int      @id @default(autoincrement())
  checkInItemId Int
  coefficient   Float
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Item {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  image_url  String    @db.VarChar(255)
  rating     Float     @db.Float
  value      Float     @db.Float
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @updatedAt @db.DateTime(0)
  title      String    @db.VarChar(500)
  background String?   @db.VarChar(7)
  textColor  String?   @db.VarChar(7)
}

model GameItemMap {
  id        Int      @id @default(autoincrement())
  gameId    Int      @unique
  itemId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameResult {
  id              Int               @id @default(autoincrement())
  userId          Int
  itemId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userStarHistory UserStarHistory[]
  users           User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserMissionMap {
  id        Int      @id @default(autoincrement())
  userId    Int
  missionId Int
  branch    String
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  mission   Mission  @relation(fields: [missionId], references: [id])

  @@index([missionId])
  @@index([userId])
}

model User {
  id             Int              @id @default(autoincrement())
  userName       String?          @db.VarChar(45)
  userId         Int
  rankId         Int
  stars          Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  magicStone     Int              @default(0)
  totalPayment   Float?           @db.Float
  branch         String
  UserRewardMap  UserRewardMap[]
  UserMissionMap UserMissionMap[]
  GameResults    GameResult[]
  GiftRounds     GiftRound[]
}

model Mission {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  reward         Float
  startHours     Int
  endHours       Int
  createdAt      DateTime         @default(now())
  quantity       Int
  type           Mission_type
  UserMissionMap UserMissionMap[]
}

model UserRewardMap {
  id              Int            @id @default(autoincrement())
  userId          Int?
  rewardId        Int?
  promotionCodeId Int?
  duration        Int?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  isUsed          Boolean        @default(false)
  branch          String?        @default("GO_VAP")
  promotionCode   PromotionCode? @relation(fields: [promotionCodeId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
  reward          Reward?        @relation(fields: [rewardId], references: [id])

  @@index([promotionCodeId])
  @@index([userId])
  @@index([rewardId])
}

model Reward {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(45)
  stars         Int?
  value         Int?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime?       @default(now())
  updateAt      DateTime?       @updatedAt
  UserRewardMap UserRewardMap[]
}

model PromotionCode {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(45)
  code          String?         @db.VarChar(45)
  value         Int?
  branch        String?         @db.VarChar(45)
  isUsed        Boolean?        @default(false)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  UserRewardMap UserRewardMap[]
}

model UserStarHistory {
  id           Int                   @id @default(autoincrement())
  userId       Int?
  oldStars     Int?
  newStars     Int?
  type         UserStarHistory_type?
  createdAt    DateTime?             @default(now())
  targetId     Int?
  branch       String?               @db.VarChar(45)
  gameResultId Int?
  gameResult   GameResult?           @relation(fields: [gameResultId], references: [id])

  @@index([userId])
  @@index([gameResultId])
}

model SavingPlan {
  id          Int      @id @default(autoincrement())
  uuid        String   @db.Text
  name        String   @db.Text
  price       Int
  description String?  @db.LongText
  isDelete    Boolean? @db.Bit(1)
}

model Computer {
  id            Int             @id @default(autoincrement())
  fingerprintId String
  ip            String?
  name          String          @db.VarChar(45)
  branch        String          @db.VarChar(45)
  status        Int
  localIp       String?
  devices       Device[]
  histories     DeviceHistory[]
}

model UserSpendMap {
  id         Int       @id @default(autoincrement())
  userId     Int?
  branch     String?   @db.VarChar(45)
  totalSpend Float?    @db.Float
  date       DateTime? @db.Date
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
}

model Staff {
  id        Int      @id @default(autoincrement())
  userName  String
  password  String
  isDeleted Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  branch    String   @default("GO_VAP")
}

model GiftRound {
  id        Int       @id @default(autoincrement())
  userId    Int
  amount    Int // Số lượt tặng
  reason    String    @db.VarChar(255) // Lý do tặng lượt
  staffId   Int // ID nhân viên thực hiện
  createdAt DateTime  @default(now())
  expiredAt DateTime? // Thời gian hết hạn của lượt tặng (nếu có)
  isUsed    Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Mission_type {
  HOURS
  ORDER
  COMBO
  GAME
}

enum UserStarHistory_type {
  CHECK_IN
  MISSION
  REWARD
  GAME
  RETURN_GIFT
}

enum DeviceStatus {
  GOOD
  DAMAGED_BUT_USABLE
  COMPLETELY_DAMAGED
}

model Device {
  id              Int             @id @default(autoincrement())
  computerId      Int
  monitorStatus   DeviceStatus    @default(GOOD)
  keyboardStatus  DeviceStatus    @default(GOOD)
  mouseStatus     DeviceStatus    @default(GOOD)
  headphoneStatus DeviceStatus    @default(GOOD)
  chairStatus     DeviceStatus    @default(GOOD)
  networkStatus   DeviceStatus    @default(GOOD)
  computerStatus  DeviceStatus    @default(GOOD)
  note            String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  computer        Computer        @relation(fields: [computerId], references: [id])
  histories       DeviceHistory[]

  @@index([computerId])
}

model DeviceHistory {
  id              Int          @id @default(autoincrement())
  computerId      Int
  type            String // 'REPORT' or 'REPAIR'
  issue           String?
  status          String // 'PENDING', 'IN_PROGRESS', 'RESOLVED'
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  monitorStatus   DeviceStatus @default(GOOD)
  keyboardStatus  DeviceStatus @default(GOOD)
  mouseStatus     DeviceStatus @default(GOOD)
  headphoneStatus DeviceStatus @default(GOOD)
  chairStatus     DeviceStatus @default(GOOD)
  networkStatus   DeviceStatus @default(GOOD)
  computer        Computer     @relation(fields: [computerId], references: [id])
  Device          Device?      @relation(fields: [deviceId], references: [id])
  deviceId        Int?
}
