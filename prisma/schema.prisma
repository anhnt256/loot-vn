generator client {
  provider      = "prisma-client-js"
  output        = "./generated/prisma-client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Rank {
  id           Int      @id @default(autoincrement())
  name         String
  fromValue    Float
  toValue      Float
  discount     Float?
  foodVoucher  Int?
  drinkVoucher Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Game {
  id            Int      @id @default(autoincrement())
  name          String
  startDate     DateTime
  endDate       DateTime
  starsPerRound Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  balance_rate  Float?   @db.Float
  play_rate     Float?   @db.Float
  jackpot       Float?   @db.Float
}

model CheckInResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  branch    String?  @default("GO_VAP")
}

model CheckInItem {
  id        Int      @id @default(autoincrement())
  dayName   String
  stars     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CheckInPromotion {
  id            Int      @id @default(autoincrement())
  checkInItemId Int
  coefficient   Float
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Item {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  image_url  String    @db.VarChar(255)
  rating     Float     @db.Float
  value      Float     @db.Float
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @updatedAt @db.DateTime(0)
  title      String    @db.VarChar(500)
  background String?   @db.VarChar(7)
  textColor  String?   @db.VarChar(7)
}

model GameItemMap {
  id        Int      @id @default(autoincrement())
  gameId    Int      @unique
  itemId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameResult {
  id              Int               @id @default(autoincrement())
  userId          Int
  itemId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userStarHistory UserStarHistory[]
  users           User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            Int             @id @default(autoincrement())
  userName      String?         @db.VarChar(45)
  userId        Int
  rankId        Int
  stars         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  magicStone    Int             @default(0)
  branch        String
  note          String? @db.VarChar(1000) @default("")
  isUseApp      Boolean         @default(true)
  totalPayment  Float?          @db.Float
  UserRewardMap UserRewardMap[]
  GameResults   GameResult[]
  premiumOrders BattlePassPremiumOrder[]
}

model Mission {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  reward      Float
  startHours  Int
  endHours    Int
  createdAt   DateTime     @default(now())
  quantity    Int
  type        Mission_type
}

model UserRewardMap {
  id              Int            @id @default(autoincrement())
  userId          Int?
  rewardId        Int?
  promotionCodeId Int?
  duration        Int?
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  isUsed          Boolean        @default(false)
  branch          String?        @default("GO_VAP")
  promotionCode   PromotionCode? @relation(fields: [promotionCodeId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
  reward          Reward?        @relation(fields: [rewardId], references: [id])

  @@index([promotionCodeId])
  @@index([userId])
  @@index([rewardId])
}

model Reward {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(45)
  stars         Int?
  value         Int?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime?       @default(now())
  updateAt      DateTime?       @updatedAt
  UserRewardMap UserRewardMap[]
}

model PromotionCode {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(45)
  code          String?         @db.VarChar(45)
  value         Int?
  branch        String?         @db.VarChar(45)
  isUsed        Boolean?        @default(false)
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  UserRewardMap UserRewardMap[]
}

model UserStarHistory {
  id           Int                   @id @default(autoincrement())
  userId       Int?
  oldStars     Int?
  newStars     Int?
  type         UserStarHistory_type?
  createdAt    DateTime?             @default(now())
  targetId     Int?
  branch       String?               @db.VarChar(45)
  gameResultId Int?
  gameResult   GameResult?           @relation(fields: [gameResultId], references: [id])

  @@index([userId])
  @@index([gameResultId])
}

model SavingPlan {
  id          Int      @id @default(autoincrement())
  uuid        String   @db.Text
  name        String   @db.Text
  price       Int
  description String?  @db.LongText
  isDelete    Boolean? @db.Bit(1)
}

model Computer {
  id            Int             @id @default(autoincrement())
  fingerprintId String
  ip            String?
  name          String          @db.VarChar(45)
  branch        String          @db.VarChar(45)
  status        Int
  localIp       String?
  devices       Device[]
  histories     DeviceHistory[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  userName  String
  password  String
  isDeleted Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  branch    String   @default("GO_VAP")
}

model GiftRound {
  id        Int       @id @default(autoincrement())
  userId    Int
  amount    Int
  reason    String    @db.VarChar(255)
  staffId   Int
  branch    String    @default("GO_VAP")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  expiredAt DateTime?
  isUsed    Boolean   @default(false)
}

model Device {
  id              Int             @id @default(autoincrement())
  computerId      Int
  monitorStatus   DeviceStatus    @default(GOOD)
  keyboardStatus  DeviceStatus    @default(GOOD)
  mouseStatus     DeviceStatus    @default(GOOD)
  headphoneStatus DeviceStatus    @default(GOOD)
  chairStatus     DeviceStatus    @default(GOOD)
  networkStatus   DeviceStatus    @default(GOOD)
  computerStatus  DeviceStatus    @default(GOOD)
  note            String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  computer        Computer        @relation(fields: [computerId], references: [id])
  histories       DeviceHistory[]

  @@index([computerId])
}

model DeviceHistory {
  id              Int          @id @default(autoincrement())
  computerId      Int
  type            String
  issue           String?
  status          String
  createdAt       DateTime     @default(now())
  monitorStatus   DeviceStatus @default(GOOD)
  keyboardStatus  DeviceStatus @default(GOOD)
  mouseStatus     DeviceStatus @default(GOOD)
  headphoneStatus DeviceStatus @default(GOOD)
  chairStatus     DeviceStatus @default(GOOD)
  networkStatus   DeviceStatus @default(GOOD)
  deviceId        Int?
  updatedAt       DateTime     @default(now()) @updatedAt
  computer        Computer     @relation(fields: [computerId], references: [id])
  Device          Device?      @relation(fields: [deviceId], references: [id])

  @@index([computerId])
}

model BattlePassSeason {
  id             Int                @id @default(autoincrement())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean            @default(false)
  maxLevel       Int                @default(100)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  rewards        BattlePassReward[]
  userBattlePass UserBattlePass[]
  premiumPackages BattlePassPremiumPackage[]

  @@map("BattlePassSeason")
}

model BattlePassReward {
  id          Int              @id @default(autoincrement())
  seasonId    Int
  level       Int
  name        String
  description String?
  type        String
  rewardType  String
  rewardValue Int?
  imageUrl    String?
  isBonus     Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  season      BattlePassSeason @relation(fields: [seasonId], references: [id])
  experience  Int              @default(0)

  @@index([seasonId])
  @@map("BattlePassReward")
}

model UserBattlePass {
  id         Int              @id @default(autoincrement())
  userId     Int
  branch     String
  seasonId   Int
  level      Int              @default(0)
  experience Int              @default(0)
  isPremium  Boolean          @default(false)
  totalSpent Float            @default(0)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  season     BattlePassSeason @relation(fields: [seasonId], references: [id])

  @@unique([userId, seasonId])
  @@index([userId])
  @@index([seasonId])
  @@map("UserBattlePass")
}

model UserBattlePassReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  seasonId  Int
  rewardId  Int
  claimedAt DateTime @default(now())

  @@unique([userId, rewardId])
  @@index([seasonId])
  @@index([userId])
}

enum Mission_type {
  HOURS
  ORDER
  TOPUP
}

enum DeviceStatus {
  GOOD
  DAMAGED_BUT_USABLE
  COMPLETELY_DAMAGED
}

enum UserStarHistory_type {
  CHECK_IN
  MISSION
  REWARD
  GAME
  RETURN_GIFT
}

enum PromotionType {
  BATTLE_PASS
  VOUCHER
  TOPUP
}

enum DiscountType {
  PERCENT
  FIXED
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model BattlePassPremiumPackage {
  id           Int      @id @default(autoincrement())
  seasonId     Int
  name         String
  basePrice    Int
  description  String?
  benefits     String?
  maxQuantity  Int?
  sold         Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  season       BattlePassSeason @relation(fields: [seasonId], references: [id])
  promotions   PromotionSetting[] @relation("PackagePromotions")
  orders       BattlePassPremiumOrder[]
}

model PromotionSetting {
  id           Int      @id @default(autoincrement())
  name         String
  type         PromotionType
  targetId     Int?
  discountType DiscountType
  discountValue Float
  startDate    DateTime
  endDate      DateTime
  maxQuantity  Int?
  used         Int      @default(0)
  isActive     Boolean  @default(true)
  rule         Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  package      BattlePassPremiumPackage? @relation("PackagePromotions", fields: [targetId], references: [id])
  orders       BattlePassPremiumOrder[]
}

model BattlePassPremiumOrder {
  id             Int      @id @default(autoincrement())
  userId         Int
  packageId      Int
  promotionId    Int?
  price          Int
  status         OrderStatus @default(PENDING)
  createdAt      DateTime @default(now())
  approvedAt     DateTime?
  approvedBy     Int?
  note           String?

  user           User     @relation(fields: [userId], references: [id])
  package        BattlePassPremiumPackage @relation(fields: [packageId], references: [id])
  promotion      PromotionSetting? @relation(fields: [promotionId], references: [id])
}
