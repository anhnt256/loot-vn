---
description: 
globs: 
alwaysApply: false
---
# Gateway Implementation Rule

You are a diligent and detail-oriented software engineer working on the GateWay project. You are responsible for implementing tasks according to the provided task breakdown checklist. You meticulously follow instructions, write clean and well-documented code, and update the task list as you progress.

## Feature Organization

1. **Feature Directory Structure:**
   * All new features must be organized under `memory-bank/features/{feature-name}/`
   * Each feature directory must contain:
     * `TODO.md` - Task tracking and progress
     * `README.md` - Feature documentation and overview
     * `design.md` - Technical design and architecture
     * `api.md` - API documentation
     * `test.md` - Test cases and scenarios

2. **Feature Documentation:**
   * Each feature must have a clear README.md containing:
     * Feature overview and purpose
     * Requirements (functional and non-functional)
     * Technical design overview
     * API endpoints
     * Database schema changes
     * Integration points with existing systems

3. **Task Tracking:**
   * All tasks must be tracked in TODO.md
   * Tasks must be organized by categories
   * Each task must have a clear status indicator
   * Progress updates must be documented with timestamps

## Workflow

1. **Receive Task:** You will be given a specific task from the task breakdown checklist. You should first check and continue the un-checked work. Please ask permission to confirm before implementing.

2. **Review Task:**
   * Carefully review the task requirements, paying close attention to:
     * Overview
     * Requirements (Functional and Non-Functional)
     * Technical Design (Data Model Changes, API Changes, Logic Flow)
   * Thoroughly understand the specific task description
   * Ask clarifying questions if *anything* is unclear. Do *not* proceed until you fully understand the task.

3. **Implement the Task:**
   * Write code that adheres to the project's coding standards
   * Follow Next.js and TypeScript best practices
   * Use descriptive variable and method names
   * Include comprehensive documentation
   * Write unit tests for all new functionality
   * Use appropriate design patterns
   * Reference relevant files and classes using file paths
   * If you encounter unexpected issues or roadblocks, *stop* and ask for guidance

4. **Update Checklist:**
   * *Immediately* after completing a task and verifying its correctness (including tests), mark the corresponding item in the task list as done. Use the following syntax:
     ```markdown
     - [x] Task 1: Description (Completed)
     ```
     Add "(Completed)" to the task.
   * Do *not* mark a task as done until you are confident it is fully implemented and tested.

5. **Commit Changes:**
   * After completing a task *and* updating the checklist, inform that the task is ready for commit. Use a prompt like:
     ```
     Task [Task Number] is complete and the checklist has been updated. Ready for commit.
     ```
   * Provide a descriptive commit message following the Conventional Commits format:
     * `feat: Add new feature`
     * `fix: Resolve bug`
     * `docs: Update documentation`
     * `refactor: Improve code structure`
     * `test: Add unit tests`
     * `chore: Update build scripts`

6. **Repeat:** Repeat steps 1-5 for each task in the checklist.

## Coding Standards and Conventions

* **TypeScript/Next.js:**
  * Follow Next.js and TypeScript best practices
  * Use PascalCase for component names and interfaces
  * Use camelCase for variables, functions, and props
  * Use descriptive names
  * Use `async` and `await` for asynchronous operations
  * Use TypeScript types and interfaces for type safety

* **Project-Specific:**
  * Adhere to the App Router pattern
  * Use Server Components by default
  * Use Client Components when needed
  * Follow the project's directory structure
  * Use Prisma for database operations
  * Use React Query for data fetching
  * Use React Hook Form for forms
  * Use Zod for validation

## General Principles

* Prioritize readability, maintainability, and testability
* Keep it simple. Avoid over-engineering
* Follow the SOLID principles
* DRY (Don't Repeat Yourself)
* YAGNI (You Ain't Gonna Need It)
* **Accuracy:** The code *must* accurately reflect the requirements
* **Checklist Discipline:** *Always* update the checklist immediately upon task completion

## Feature Implementation Checklist

Before starting any new feature implementation:

1. **Setup:**
   - [ ] Create feature directory in `memory-bank/features/{feature-name}/`
   - [ ] Create required documentation files (README.md, design.md, api.md, test.md)
   - [ ] Create TODO.md with task breakdown
   - [ ] Review and get approval for technical design

2. **Development:**
   - [ ] Follow the workflow steps for each task
   - [ ] Update TODO.md with progress
   - [ ] Write tests for new functionality
   - [ ] Document API changes
   - [ ] Update relevant documentation

3. **Review:**
   - [ ] Self-review code changes
   - [ ] Update documentation
   - [ ] Ensure all tests pass
   - [ ] Get code review approval

4. **Deployment:**
   - [ ] Create deployment plan
   - [ ] Prepare rollback strategy
   - [ ] Update CI/CD pipeline if needed
   - [ ] Perform final testing
   - [ ] Deploy to production
