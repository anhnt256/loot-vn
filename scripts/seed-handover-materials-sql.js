const mysql = require('mysql2/promise');

// Database configuration
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'gateway_app',
  port: process.env.DB_PORT || 3306
};

async function seedHandoverMaterials() {
  let connection;
  
  try {
    console.log('üå± Starting handover materials seed...');
    
    // Create connection
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connected to database');

    // Clear existing data
    await connection.execute('DELETE FROM HandoverMaterial');
    await connection.execute('DELETE FROM HandoverReport');
    await connection.execute('DELETE FROM Material');
    console.log('üóëÔ∏è Cleared existing data');

    // Create materials for B√°o c√°o b·∫øp
    const kitchenMaterials = [
      ['G·∫°o', 'BAO_CAO_BEP', true],
      ['Th·ªãt heo', 'BAO_CAO_BEP', true],
      ['Th·ªãt b√≤', 'BAO_CAO_BEP', true],
      ['C√°', 'BAO_CAO_BEP', true],
      ['Rau c·∫£i', 'BAO_CAO_BEP', true],
      ['H√†nh l√°', 'BAO_CAO_BEP', true],
      ['D·∫ßu ƒÉn', 'BAO_CAO_BEP', false],
      ['N∆∞·ªõc m·∫Øm', 'BAO_CAO_BEP', false],
      ['Mu·ªëi', 'BAO_CAO_BEP', false],
      ['ƒê∆∞·ªùng', 'BAO_CAO_BEP', false],
    ];

    // Create materials for B√°o c√°o n∆∞·ªõc
    const drinkMaterials = [
      ['Coca Cola', 'BAO_CAO_NUOC', false],
      ['Pepsi', 'BAO_CAO_NUOC', false],
      ['Sprite', 'BAO_CAO_NUOC', false],
      ['Fanta', 'BAO_CAO_NUOC', false],
      ['N∆∞·ªõc su·ªëi', 'BAO_CAO_NUOC', false],
      ['Tr√† ƒë√°', 'BAO_CAO_NUOC', false],
      ['C√† ph√™', 'BAO_CAO_NUOC', false],
      ['S·ªØa t∆∞∆°i', 'BAO_CAO_NUOC', false],
    ];

    const allMaterials = [...kitchenMaterials, ...drinkMaterials];

    // Insert materials
    for (const [name, reportType, isOnFood] of allMaterials) {
      await connection.execute(
        'INSERT INTO Material (name, reportType, isOnFood, isActive, createdAt, updatedAt) VALUES (?, ?, ?, ?, NOW(), NOW())',
        [name, reportType, isOnFood, true]
      );
    }

    console.log(`‚úÖ Created ${allMaterials.length} materials`);

    // Create handover reports for different dates
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const twoDaysAgo = new Date(today);
    twoDaysAgo.setDate(twoDaysAgo.getDate() - 2);

    const reportDates = [
      { date: today, label: 'Today' },
      { date: yesterday, label: 'Yesterday' },
      { date: twoDaysAgo, label: 'Two days ago' }
    ];

    for (const { date, label } of reportDates) {
      console.log(`üìÖ Creating reports for ${label} (${date.toISOString().split('T')[0]})`);

      // Create B√°o c√°o b·∫øp
      const [kitchenResult] = await connection.execute(
        'INSERT INTO HandoverReport (date, reportType, branch, note, createdAt, updatedAt) VALUES (?, ?, ?, ?, NOW(), NOW())',
        [date, 'BAO_CAO_BEP', 'GO_VAP', `B√°o c√°o b·∫øp ${label}`]
      );
      const kitchenReportId = kitchenResult.insertId;

      // Create B√°o c√°o n∆∞·ªõc
      const [drinkResult] = await connection.execute(
        'INSERT INTO HandoverReport (date, reportType, branch, note, createdAt, updatedAt) VALUES (?, ?, ?, ?, NOW(), NOW())',
        [date, 'BAO_CAO_NUOC', 'GO_VAP', `B√°o c√°o n∆∞·ªõc ${label}`]
      );
      const drinkReportId = drinkResult.insertId;

      // Create handover materials for kitchen report
      const kitchenHandoverMaterials = [
        // Case 1: Ca s√°ng kh√¥ng update, ca chi·ªÅu update th·ª±c t·∫ø
        {
          handoverReportId: kitchenReportId,
          materialName: 'G·∫°o',
          materialType: 'NGUYEN_VAT_LIEU',
          // Ca s√°ng: kh√¥ng update (0)
          morningBeginning: 0,
          morningReceived: 0,
          morningIssued: 0,
          morningEnding: 0,
          // Ca chi·ªÅu: update th·ª±c t·∫ø
          afternoonBeginning: 50, // T·ªìn ƒë·∫ßu ca chi·ªÅu
          afternoonReceived: 20,  // Nh·∫≠p th√™m
          afternoonIssued: 15,    // Xu·∫•t
          afternoonEnding: 55,    // T·ªìn cu·ªëi = 50 + 20 - 15
          // Ca t·ªëi: ch∆∞a c√≥ d·ªØ li·ªáu
          eveningBeginning: 0,
          eveningReceived: 0,
          eveningIssued: 0,
          eveningEnding: 0,
        },
        // Case 2: Ca s√°ng b√°o c√°o sai - T·ªìn cu·ªëi 40, nh∆∞ng T·ªìn ƒë·∫ßu ca chi·ªÅu l√† 43
        {
          handoverReportId: kitchenReportId,
          materialName: 'Th·ªãt heo',
          materialType: 'NGUYEN_VAT_LIEU',
          // Ca s√°ng: b√°o c√°o sai
          morningBeginning: 30,
          morningReceived: 15,
          morningIssued: 5,
          morningEnding: 40, // B√°o c√°o sai
          // Ca chi·ªÅu: th·ª±c t·∫ø t·ªìn ƒë·∫ßu l√† 43 (kh√¥ng kh·ªõp v·ªõi t·ªìn cu·ªëi ca s√°ng)
          afternoonBeginning: 43, // Kh√¥ng kh·ªõp v·ªõi morningEnding = 40
          afternoonReceived: 10,
          afternoonIssued: 8,
          afternoonEnding: 45,
          // Ca t·ªëi
          eveningBeginning: 0,
          eveningReceived: 0,
          eveningIssued: 0,
          eveningEnding: 0,
        },
        // Case 3: Ca s√°ng b√°o c√°o sai - T·ªìn cu·ªëi 40, nh∆∞ng T·ªìn ƒë·∫ßu ca chi·ªÅu l√† 35
        {
          handoverReportId: kitchenReportId,
          materialName: 'Th·ªãt b√≤',
          materialType: 'NGUYEN_VAT_LIEU',
          // Ca s√°ng: b√°o c√°o sai
          morningBeginning: 25,
          morningReceived: 20,
          morningIssued: 5,
          morningEnding: 40, // B√°o c√°o sai
          // Ca chi·ªÅu: th·ª±c t·∫ø t·ªìn ƒë·∫ßu l√† 35 (√≠t h∆°n t·ªìn cu·ªëi ca s√°ng)
          afternoonBeginning: 35, // √çt h∆°n morningEnding = 40
          afternoonReceived: 12,
          afternoonIssued: 7,
          afternoonEnding: 40,
          // Ca t·ªëi
          eveningBeginning: 0,
          eveningReceived: 0,
          eveningIssued: 0,
          eveningEnding: 0,
        },
        // Normal case - all shifts have data
        {
          handoverReportId: kitchenReportId,
          materialName: 'C√°',
          materialType: 'NGUYEN_VAT_LIEU',
          morningBeginning: 20,
          morningReceived: 10,
          morningIssued: 8,
          morningEnding: 22,
          afternoonBeginning: 22,
          afternoonReceived: 15,
          afternoonIssued: 12,
          afternoonEnding: 25,
          eveningBeginning: 25,
          eveningReceived: 5,
          eveningIssued: 10,
          eveningEnding: 20,
        },
        // Normal case - food item
        {
          handoverReportId: kitchenReportId,
          materialName: 'Rau c·∫£i',
          materialType: 'NGUYEN_VAT_LIEU',
          morningBeginning: 5,
          morningReceived: 8,
          morningIssued: 6,
          morningEnding: 7,
          afternoonBeginning: 7,
          afternoonReceived: 5,
          afternoonIssued: 4,
          afternoonEnding: 8,
          eveningBeginning: 8,
          eveningReceived: 3,
          eveningIssued: 5,
          eveningEnding: 6,
        },
        // Non-food item
        {
          handoverReportId: kitchenReportId,
          materialName: 'D·∫ßu ƒÉn',
          materialType: 'NGUYEN_VAT_LIEU',
          morningBeginning: 10,
          morningReceived: 5,
          morningIssued: 3,
          morningEnding: 12,
          afternoonBeginning: 12,
          afternoonReceived: 2,
          afternoonIssued: 4,
          afternoonEnding: 10,
          eveningBeginning: 10,
          eveningReceived: 1,
          eveningIssued: 2,
          eveningEnding: 9,
        }
      ];

      // Create handover materials for drink report
      const drinkHandoverMaterials = [
        // Case 1: Ca s√°ng kh√¥ng update
        {
          handoverReportId: drinkReportId,
          materialName: 'Coca Cola',
          materialType: 'NUOC_UONG',
          morningBeginning: 0,
          morningReceived: 0,
          morningIssued: 0,
          morningEnding: 0,
          afternoonBeginning: 100,
          afternoonReceived: 50,
          afternoonIssued: 30,
          afternoonEnding: 120,
          eveningBeginning: 0,
          eveningReceived: 0,
          eveningIssued: 0,
          eveningEnding: 0,
        },
        // Case 2: B√°o c√°o sai
        {
          handoverReportId: drinkReportId,
          materialName: 'Pepsi',
          materialType: 'NUOC_UONG',
          morningBeginning: 80,
          morningReceived: 20,
          morningIssued: 15,
          morningEnding: 85, // B√°o c√°o sai
          afternoonBeginning: 90, // Kh√¥ng kh·ªõp v·ªõi morningEnding
          afternoonReceived: 30,
          afternoonIssued: 25,
          afternoonEnding: 95,
          eveningBeginning: 0,
          eveningReceived: 0,
          eveningIssued: 0,
          eveningEnding: 0,
        },
        // Normal case
        {
          handoverReportId: drinkReportId,
          materialName: 'N∆∞·ªõc su·ªëi',
          materialType: 'NUOC_UONG',
          morningBeginning: 50,
          morningReceived: 20,
          morningIssued: 15,
          morningEnding: 55,
          afternoonBeginning: 55,
          afternoonReceived: 25,
          afternoonIssued: 20,
          afternoonEnding: 60,
          eveningBeginning: 60,
          eveningReceived: 10,
          eveningIssued: 15,
          eveningEnding: 55,
        }
      ];

      // Insert all handover materials
      const allHandoverMaterials = [...kitchenHandoverMaterials, ...drinkHandoverMaterials];
      
      for (const material of allHandoverMaterials) {
        await connection.execute(
          `INSERT INTO HandoverMaterial (
            handoverReportId, materialName, materialType,
            morningBeginning, morningReceived, morningIssued, morningEnding,
            afternoonBeginning, afternoonReceived, afternoonIssued, afternoonEnding,
            eveningBeginning, eveningReceived, eveningIssued, eveningEnding,
            createdAt, updatedAt
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`,
          [
            material.handoverReportId,
            material.materialName,
            material.materialType,
            material.morningBeginning,
            material.morningReceived,
            material.morningIssued,
            material.morningEnding,
            material.afternoonBeginning,
            material.afternoonReceived,
            material.afternoonIssued,
            material.afternoonEnding,
            material.eveningBeginning,
            material.eveningReceived,
            material.eveningIssued,
            material.eveningEnding,
          ]
        );
      }

      console.log(`‚úÖ Created ${allHandoverMaterials.length} handover materials for ${label}`);
    }

    console.log('üéâ Handover materials seed completed successfully!');
    
    // Print summary
    const [materialCount] = await connection.execute('SELECT COUNT(*) as count FROM Material');
    const [reportCount] = await connection.execute('SELECT COUNT(*) as count FROM HandoverReport');
    const [handoverMaterialCount] = await connection.execute('SELECT COUNT(*) as count FROM HandoverMaterial');
    
    console.log('\nüìä Summary:');
    console.log(`- Materials: ${materialCount[0].count}`);
    console.log(`- Handover Reports: ${reportCount[0].count}`);
    console.log(`- Handover Materials: ${handoverMaterialCount[0].count}`);

  } catch (error) {
    console.error('‚ùå Error seeding handover materials:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Run the seed function
seedHandoverMaterials()
  .then(() => {
    console.log('‚úÖ Seed completed');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Seed failed:', error);
    process.exit(1);
  }); 