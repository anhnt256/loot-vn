const { PrismaClient } = require('../prisma/generated/prisma-client');

const prisma = new PrismaClient();

async function seedPromotionRewards() {
  console.log('üå± B·∫Øt ƒë·∫ßu seed d·ªØ li·ªáu PromotionReward...');

  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
    const existingCount = await prisma.promotionReward.count();
    
    if (existingCount > 0) {
      console.log(`‚è≠Ô∏è PromotionReward ƒë√£ t·ªìn t·∫°i (${existingCount} records), b·ªè qua...`);
      return;
    }

    // D·ªØ li·ªáu promotion rewards
    const promotionRewards = [
      {
        name: "Th·∫ª c√†o 10k",
        value: 10000,
        starsValue: 13000,
        branch: "GO_VAP",
        quantity: 10000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 10k",
        value: 10000,
        starsValue: 13000,
        branch: "TAN_PHU",
        quantity: 10000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 20k",
        value: 20000,
        starsValue: 25000,
        branch: "GO_VAP",
        quantity: 7000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 20k",
        value: 20000,
        starsValue: 25000,
        branch: "TAN_PHU",
        quantity: 7000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 50k",
        value: 50000,
        starsValue: 50000,
        branch: "GO_VAP",
        quantity: 5000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 50k",
        value: 50000,
        starsValue: 50000,
        branch: "TAN_PHU",
        quantity: 5000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 100k",
        value: 100000,
        starsValue: 95000,
        branch: "GO_VAP",
        quantity: 2000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 100k",
        value: 100000,
        starsValue: 95000,
        branch: "TAN_PHU",
        quantity: 2000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 200k",
        value: 200000,
        starsValue: 180000,
        branch: "GO_VAP",
        quantity: 1000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 200k",
        value: 200000,
        starsValue: 180000,
        branch: "TAN_PHU",
        quantity: 1000,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 500k",
        value: 500000,
        starsValue: 450000,
        branch: "GO_VAP",
        quantity: 500,
        isActive: true
      },
      {
        name: "Th·∫ª c√†o 500k",
        value: 500000,
        starsValue: 450000,
        branch: "TAN_PHU",
        quantity: 500,
        isActive: true
      }
    ];

    // T·∫°o d·ªØ li·ªáu
    for (const reward of promotionRewards) {
      await prisma.promotionReward.create({
        data: reward
      });
      console.log(`‚úÖ ƒê√£ t·∫°o: ${reward.name} - ${reward.value.toLocaleString()} VND (${reward.starsValue.toLocaleString()} sao) - ${reward.branch} - S·ªë l∆∞·ª£ng: ${reward.quantity.toLocaleString()}`);
    }

    console.log('üéâ Ho√†n th√†nh seed d·ªØ li·ªáu PromotionReward!');
    
    // Hi·ªÉn th·ªã t·ªïng k·∫øt
    const totalRewards = await prisma.promotionReward.count();
    const totalValue = await prisma.promotionReward.aggregate({
      _sum: {
        value: true
      }
    });
    const totalQuantity = await prisma.promotionReward.aggregate({
      _sum: {
        quantity: true
      }
    });

    console.log('\nüìä T·ªïng k·∫øt:');
    console.log(`- T·ªïng s·ªë lo·∫°i th·∫ª: ${totalRewards}`);
    console.log(`- T·ªïng gi√° tr·ªã: ${totalValue._sum.value?.toLocaleString()} VND`);
    console.log(`- T·ªïng s·ªë l∆∞·ª£ng: ${totalQuantity._sum.quantity?.toLocaleString()} th·∫ª`);

  } catch (error) {
    console.error('‚ùå L·ªói khi seed d·ªØ li·ªáu:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y seed n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  seedPromotionRewards()
    .then(() => {
      console.log('‚úÖ Seed ho√†n th√†nh!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Seed th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { seedPromotionRewards };