"use client";

import { useState, useEffect } from "react";
import {
  Card,
  Table,
  Button,
  Input,
  Select,
  Tag,
  Space,
  Modal,
  Form,
  InputNumber,
  message,
  Popconfirm,
} from "antd";
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SearchOutlined,
  ReloadOutlined,
} from "@ant-design/icons";
import Cookies from "js-cookie";

const { Search } = Input;

interface Reward {
  id: string;
  name: string;
  description: string;
  type: string;
  value: number;
  minOrderAmount?: number;
  maxDiscountAmount?: number;
  isActive: boolean;
  usageCount: number;
  maxUsageCount?: number;
  createdAt: string;
  itemType?: string;
}

interface RewardsTabProps {
  selectedBranch: string;
  selectedEvent: Event | null;
}

interface Event {
  id: string;
  name: string;
  description: string;
  type: string;
  status: string;
  startDate: string;
  endDate: string;
  budget: number;
  expectedParticipants: number;
  totalParticipants: number;
  totalCodesGenerated: number;
  totalCodesUsed: number;
  totalRewardsDistributed: number;
  createdAt: string;
}

export default function RewardsTab({
  selectedBranch,
  selectedEvent,
}: RewardsTabProps) {
  const [rewards, setRewards] = useState<Reward[]>([]);
  const [loading, setLoading] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [editingReward, setEditingReward] = useState<Reward | null>(null);
  const [searchText, setSearchText] = useState("");
  const [filterType, setFilterType] = useState<string>("all");
  const [form] = Form.useForm();

  const rewardTypes = [
    { value: "PERCENTAGE_DISCOUNT", label: "Gi·∫£m gi√° %" },
    { value: "FIXED_DISCOUNT", label: "Gi·∫£m gi√° c·ªë ƒë·ªãnh" },
    { value: "FREE_ITEM", label: "T·∫∑ng mi·ªÖn ph√≠" },
    { value: "BOGO", label: "Mua 1 t·∫∑ng 1" },
    { value: "MULTIPLIER", label: "Nh√¢n ƒë√¥i ƒëi·ªÉm" },
    { value: "FREE_TIME", label: "T·∫∑ng th·ªùi gian ch∆°i" },
    { value: "MAIN_ACCOUNT_TOPUP", label: "T·∫∑ng t√†i kho·∫£n ch√≠nh" },
    { value: "TOPUP_BONUS_PERCENTAGE", label: "T·∫∑ng % khi n·∫°p ti·ªÅn" },
  ];

  const fetchRewards = async () => {
    try {
      console.log(
        "Fetching rewards for branch:",
        selectedBranch,
        "event:",
        selectedEvent?.id,
      );
      setLoading(true);

      if (!selectedEvent) {
        setRewards([]);
        return;
      }

      const response = await fetch(`/api/rewards?eventId=${selectedEvent.id}`);
      const data = await response.json();
      if (data.success) {
        setRewards(data.rewards);
      }
    } catch (error) {
      console.error("Error fetching rewards:", error);
      message.error("L·ªói khi t·∫£i danh s√°ch rewards");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRewards();
  }, [selectedBranch, selectedEvent]);

  const handleCreateReward = async (values: any) => {
    try {
      if (!selectedEvent) {
        message.error("Vui l√≤ng ch·ªçn event tr∆∞·ªõc");
        return;
      }

      setLoading(true);
      const response = await fetch("/api/rewards", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...values,
          eventId: selectedEvent.id,
        }),
      });

      const data = await response.json();
      if (data.success) {
        message.success("T·∫°o reward th√†nh c√¥ng!");
        setShowCreateModal(false);
        form.resetFields();
        fetchRewards();
      } else {
        message.error(data.error || "L·ªói khi t·∫°o reward");
      }
    } catch (error) {
      console.error("Error creating reward:", error);
      message.error("L·ªói khi t·∫°o reward");
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateReward = async (values: any) => {
    if (!editingReward) return;

    try {
      setLoading(true);
      console.log("[DEBUG] Frontend sending values:", values);
      const response = await fetch(`/api/rewards/${editingReward.id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...values,
        }),
      });

      const data = await response.json();
      if (data.success) {
        message.success("C·∫≠p nh·∫≠t reward th√†nh c√¥ng!");
        setShowCreateModal(false);
        setEditingReward(null);
        form.resetFields();
        fetchRewards();
      } else {
        message.error(data.error || "L·ªói khi c·∫≠p nh·∫≠t reward");
      }
    } catch (error) {
      console.error("Error updating reward:", error);
      message.error("L·ªói khi c·∫≠p nh·∫≠t reward");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteReward = async (rewardId: string) => {
    try {
      setLoading(true);
      const response = await fetch(`/api/rewards/${rewardId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({}),
      });

      const data = await response.json();
      if (data.success) {
        message.success("X√≥a reward th√†nh c√¥ng!");
        fetchRewards();
      } else {
        message.error(data.error || "L·ªói khi x√≥a reward");
      }
    } catch (error) {
      console.error("Error deleting reward:", error);
      message.error("L·ªói khi x√≥a reward");
    } finally {
      setLoading(false);
    }
  };

  const getTypeText = (type: string) => {
    const typeMap = {
      PERCENTAGE_DISCOUNT: "Gi·∫£m gi√° %",
      FIXED_DISCOUNT: "Gi·∫£m gi√° c·ªë ƒë·ªãnh",
      FREE_ITEM: "T·∫∑ng mi·ªÖn ph√≠",
      BOGO: "Mua 1 t·∫∑ng 1",
      MULTIPLIER: "Nh√¢n ƒë√¥i ƒëi·ªÉm",
      FREE_TIME: "T·∫∑ng th·ªùi gian ch∆°i",
      MAIN_ACCOUNT_TOPUP: "T·∫∑ng t√†i kho·∫£n ch√≠nh",
      TOPUP_BONUS_PERCENTAGE: "T·∫∑ng % khi n·∫°p ti·ªÅn",
    };
    return typeMap[type as keyof typeof typeMap] || type;
  };

  const getTypeColor = (type: string) => {
    const colorMap = {
      PERCENTAGE_DISCOUNT: "blue",
      FIXED_DISCOUNT: "green",
      FREE_ITEM: "purple",
      BOGO: "orange",
      MULTIPLIER: "cyan",
      FREE_TIME: "magenta",
      MAIN_ACCOUNT_TOPUP: "gold",
      TOPUP_BONUS_PERCENTAGE: "lime",
    };
    return colorMap[type as keyof typeof colorMap] || "default";
  };

  const filteredRewards = rewards.filter((reward) => {
    const matchesSearch =
      reward.name.toLowerCase().includes(searchText.toLowerCase()) ||
      reward.description.toLowerCase().includes(searchText.toLowerCase());
    const matchesType = filterType === "all" || reward.type === filterType;
    return matchesSearch && matchesType;
  });

  const columns = [
    {
      title: "T√™n Reward",
      dataIndex: "name",
      key: "name",
      render: (text: string, record: Reward) => (
        <div>
          <div className="font-medium">{text}</div>
          <div className="text-sm text-gray-500">{record.description}</div>
        </div>
      ),
    },
    {
      title: "Lo·∫°i",
      dataIndex: "type",
      key: "type",
      render: (type: string) => (
        <Tag color={getTypeColor(type)}>{getTypeText(type)}</Tag>
      ),
    },
    {
      title: "Gi√° tr·ªã",
      dataIndex: "value",
      key: "value",
      render: (value: number, record: Reward) => {
        switch (record.type) {
          case "PERCENTAGE_DISCOUNT":
          case "TOPUP_BONUS_PERCENTAGE":
            return `${value}%`;
          case "FIXED_DISCOUNT":
          case "FREE_TIME":
          case "MAIN_ACCOUNT_TOPUP":
            return `${value.toLocaleString()} VND`;
          case "MULTIPLIER":
            return `x${value}`;
          default:
            return value.toString();
        }
      },
    },
    {
      title: "S·ª≠ d·ª•ng",
      dataIndex: "usageCount",
      key: "usageCount",
      render: (count: number, record: Reward) => (
        <div>
          <div>{count}</div>
          {record.maxUsageCount && (
            <div className="text-xs text-gray-500">
              / {record.maxUsageCount}
            </div>
          )}
        </div>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "isActive",
      key: "isActive",
      render: (isActive: boolean) => (
        <Tag color={isActive ? "success" : "default"}>
          {isActive ? "Ho·∫°t ƒë·ªông" : "T·∫°m d·ª´ng"}
        </Tag>
      ),
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "actions",
      render: (_: any, record: Reward) => (
        <Space>
          <Button
            icon={<EditOutlined />}
            onClick={() => {
              console.log("[DEBUG] Editing reward:", record);
              setEditingReward(record);
              form.setFieldsValue(record);
              setShowCreateModal(true);
            }}
          />
          <Popconfirm
            title="X√≥a reward n√†y?"
            description="H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."
            onConfirm={() => handleDeleteReward(record.id)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button icon={<DeleteOutlined />} danger />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div className="space-y-4">
      {!selectedEvent ? (
        <Card className="border-2 border-dashed border-gray-300">
          <div className="flex items-center justify-center h-32">
            <div className="text-center">
              <div className="text-4xl mb-2">üéÅ</div>
              <p className="text-gray-500 font-medium">
                Vui l√≤ng ch·ªçn event ƒë·ªÉ xem rewards
              </p>
            </div>
          </div>
        </Card>
      ) : (
        <>
          {/* Header Actions */}
          <div className="flex justify-between items-center">
            <div className="flex gap-4">
              <Search
                placeholder="T√¨m ki·∫øm reward..."
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                style={{ width: 300 }}
                prefix={<SearchOutlined />}
              />
              <Select
                value={filterType}
                onChange={setFilterType}
                style={{ width: 200 }}
                options={[
                  { value: "all", label: "T·∫•t c·∫£ lo·∫°i" },
                  ...rewardTypes,
                ]}
              />
            </div>
            <div className="flex gap-2">
              <Button icon={<ReloadOutlined />} onClick={fetchRewards}>
                L√†m m·ªõi
              </Button>
              <Button
                type="primary"
                icon={<PlusOutlined />}
                onClick={() => {
                  setEditingReward(null);
                  form.resetFields();
                  setShowCreateModal(true);
                }}
              >
                T·∫°o Reward
              </Button>
            </div>
          </div>

          {/* Rewards Table */}
          <Card>
            <Table
              columns={columns}
              dataSource={filteredRewards}
              rowKey="id"
              loading={loading}
              pagination={{
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) =>
                  `${range[0]}-${range[1]} c·ªßa ${total} rewards`,
              }}
            />
          </Card>

          {/* Create/Edit Modal */}
          <Modal
            title={editingReward ? "Ch·ªânh s·ª≠a Reward" : "T·∫°o Reward M·ªõi"}
            open={showCreateModal}
            onCancel={() => {
              setShowCreateModal(false);
              setEditingReward(null);
              form.resetFields();
            }}
            footer={null}
            width={700}
          >
            <Form
              form={form}
              layout="vertical"
              onFinish={editingReward ? handleUpdateReward : handleCreateReward}
              initialValues={{
                type: "PERCENTAGE_DISCOUNT",
                isActive: true,
              }}
            >
              {/* Row 1: Name v√† Description */}
              <div className="grid grid-cols-1 gap-4">
                <Form.Item
                  name="name"
                  label="T√™n Reward"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p t√™n reward" },
                  ]}
                >
                  <Input placeholder="V√≠ d·ª•: Gi·∫£m 20% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n" />
                </Form.Item>

                <Form.Item name="description" label="M√¥ t·∫£">
                  <Input.TextArea
                    rows={2}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ reward..."
                  />
                </Form.Item>
              </div>

              {/* Row 2: Type v√† ItemType */}
              <div className="grid grid-cols-2 gap-4">
                <Form.Item
                  name="type"
                  label="Lo·∫°i Reward"
                  rules={[
                    { required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i reward" },
                  ]}
                >
                  <Select options={rewardTypes} />
                </Form.Item>

                <Form.Item
                  shouldUpdate={(prevValues, currentValues) =>
                    prevValues.type !== currentValues.type
                  }
                >
                  {({ getFieldValue }) => {
                    const type = getFieldValue("type");
                    return (
                      <Form.Item name="itemType" label="Lo·∫°i Item">
                        <Select
                          placeholder="Ch·ªçn lo·∫°i item"
                          disabled={
                            type !== "FREE_ITEM" && type !== "FREE_TIME"
                          }
                          options={[
                            { value: "HOURS", label: "Gi·ªù ch∆°i" },
                            { value: "DRINK", label: "N∆∞·ªõc u·ªëng" },
                            { value: "FOOD", label: "ƒê·ªì ƒÉn" },
                            { value: "SNACK", label: "ƒê·ªì ƒÉn v·∫∑t" },
                            { value: "VOUCHER", label: "Voucher" },
                          ]}
                        />
                      </Form.Item>
                    );
                  }}
                </Form.Item>
              </div>

              {/* Row 3: Value v√† MinOrderAmount */}
              <div className="grid grid-cols-2 gap-4">
                <Form.Item
                  name="value"
                  label="Gi√° tr·ªã"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p gi√° tr·ªã" }]}
                >
                  <InputNumber
                    className="w-full"
                    min={0}
                    placeholder="Gi√° tr·ªã reward"
                  />
                </Form.Item>

                <Form.Item
                  name="minOrderAmount"
                  label="ƒê∆°n h√†ng t·ªëi thi·ªÉu (VND)"
                >
                  <InputNumber
                    className="w-full"
                    min={0}
                    placeholder="ƒê∆°n h√†ng t·ªëi thi·ªÉu"
                  />
                </Form.Item>
              </div>

              {/* Row 4: MaxDiscountAmount v√† MaxUsageCount */}
              <div className="grid grid-cols-2 gap-4">
                <Form.Item
                  name="maxDiscountAmount"
                  label="Gi·∫£m gi√° t·ªëi ƒëa (VND)"
                >
                  <InputNumber
                    className="w-full"
                    min={0}
                    placeholder="Gi·∫£m gi√° t·ªëi ƒëa"
                  />
                </Form.Item>

                <Form.Item name="maxUsageCount" label="S·ªë l·∫ßn s·ª≠ d·ª•ng t·ªëi ƒëa">
                  <InputNumber
                    className="w-full"
                    min={1}
                    placeholder="Kh√¥ng gi·ªõi h·∫°n"
                  />
                </Form.Item>
              </div>

              {/* Row 5: Status */}
              <div className="grid grid-cols-1 gap-4">
                <Form.Item name="isActive" label="Tr·∫°ng th√°i">
                  <Select
                    options={[
                      { value: true, label: "Ho·∫°t ƒë·ªông" },
                      { value: false, label: "T·∫°m d·ª´ng" },
                    ]}
                  />
                </Form.Item>
              </div>

              <div className="flex gap-2 justify-end">
                <Button
                  onClick={() => {
                    setShowCreateModal(false);
                    setEditingReward(null);
                    form.resetFields();
                  }}
                >
                  H·ªßy
                </Button>
                <Button type="primary" htmlType="submit" loading={loading}>
                  {editingReward ? "C·∫≠p nh·∫≠t" : "T·∫°o"}
                </Button>
              </div>
            </Form>
          </Modal>
        </>
      )}
    </div>
  );
}
